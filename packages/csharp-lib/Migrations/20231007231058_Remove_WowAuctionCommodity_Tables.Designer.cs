// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wowthing.Lib.Contexts;
using Wowthing.Lib.Enums;
using Wowthing.Lib.Models;
using Wowthing.Lib.Models.Global;
using Wowthing.Lib.Models.Player;
using Wowthing.Lib.Models.Wow;

#nullable disable

namespace Wowthing.Lib.Migrations
{
    [DbContext(typeof(WowDbContext))]
    [Migration("20231007231058_Remove_WowAuctionCommodity_Tables")]
    partial class Remove_WowAuctionCommodity_Tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<bool>("CanUseSubdomain")
                        .HasColumnType("boolean")
                        .HasColumnName("can_use_subdomain");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime>("LastApiCheck")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_api_check");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_visit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<ApplicationUserSettings>("Settings")
                        .HasColumnType("jsonb")
                        .HasColumnName("settings");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.BackgroundImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribution")
                        .HasColumnType("text")
                        .HasColumnName("attribution");

                    b.Property<short>("DefaultBrightness")
                        .HasColumnType("smallint")
                        .HasColumnName("default_brightness");

                    b.Property<short>("DefaultSaturate")
                        .HasColumnType("smallint")
                        .HasColumnName("default_saturate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_background_image");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_background_image_role_id");

                    b.ToTable("background_image", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Global.GlobalDailies", b =>
                {
                    b.Property<int>("Expansion")
                        .HasColumnType("integer")
                        .HasColumnName("expansion");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<List<int>>("QuestExpires")
                        .HasColumnType("integer[]")
                        .HasColumnName("quest_expires");

                    b.Property<List<int>>("QuestIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("quest_ids");

                    b.Property<List<GlobalDailiesReward>>("QuestRewards")
                        .HasColumnType("jsonb")
                        .HasColumnName("quest_rewards");

                    b.HasKey("Expansion", "Region")
                        .HasName("pk_global_dailies");

                    b.ToTable("global_dailies", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Image", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<short>("Format")
                        .HasColumnType("smallint")
                        .HasColumnName("format");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("Sha256")
                        .HasColumnType("char(64)")
                        .HasColumnName("sha256");

                    b.HasKey("Type", "Id", "Format")
                        .HasName("pk_image");

                    b.HasIndex("Type", "Sha256", "Format")
                        .HasDatabaseName("ix_image_type_sha256_format");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.LanguageString", b =>
                {
                    b.Property<short>("Language")
                        .HasColumnType("smallint")
                        .HasColumnName("language");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("String")
                        .HasColumnType("text")
                        .HasColumnName("string");

                    b.HasKey("Language", "Type", "Id")
                        .HasName("pk_language_string");

                    b.HasIndex("String")
                        .HasDatabaseName("ix_language_string_string");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("String"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("String"), new[] { "gin_trgm_ops" });

                    b.HasIndex("Language", "Type", "Id")
                        .HasDatabaseName("ix_language_string_language_type_id");

                    b.ToTable("language_string", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_player_account");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_player_account_user_id");

                    b.HasIndex("Region", "AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_player_account_region_account_id");

                    b.ToTable("player_account", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountAddonData", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<Dictionary<int, short>>("Heirlooms")
                        .HasColumnType("jsonb")
                        .HasColumnName("heirlooms");

                    b.Property<short>("HonorCurrent")
                        .HasColumnType("smallint")
                        .HasColumnName("honor_current");

                    b.Property<short>("HonorLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("honor_level");

                    b.Property<short>("HonorMax")
                        .HasColumnType("smallint")
                        .HasColumnName("honor_max");

                    b.Property<List<int>>("Quests")
                        .HasColumnType("integer[]")
                        .HasColumnName("quests");

                    b.HasKey("AccountId")
                        .HasName("pk_player_account_addon_data");

                    b.ToTable("player_account_addon_data", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountGoldSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer")
                        .HasColumnName("realm_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_player_account_gold_snapshot");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_player_account_gold_snapshot_account_id");

                    b.ToTable("player_account_gold_snapshot", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountHeirlooms", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<Dictionary<int, int>>("Heirlooms")
                        .HasColumnType("jsonb")
                        .HasColumnName("heirlooms");

                    b.HasKey("AccountId")
                        .HasName("pk_player_account_heirlooms");

                    b.ToTable("player_account_heirlooms", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountPets", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<Dictionary<long, PlayerAccountPetsPet>>("Pets")
                        .HasColumnType("jsonb")
                        .HasColumnName("pets");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("AccountId")
                        .HasName("pk_player_account_pets");

                    b.ToTable("player_account_pets", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountToys", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<List<int>>("ToyIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("toy_ids");

                    b.HasKey("AccountId")
                        .HasName("pk_player_account_toys");

                    b.ToTable("player_account_toys", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountTransmogSources", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<List<string>>("Sources")
                        .HasColumnType("text[]")
                        .HasColumnName("sources");

                    b.HasKey("AccountId")
                        .HasName("pk_player_account_transmog_sources");

                    b.ToTable("player_account_transmog_sources", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("ActiveSpecId")
                        .HasColumnType("integer")
                        .HasColumnName("active_spec_id");

                    b.Property<int>("ActiveTitleId")
                        .HasColumnType("integer")
                        .HasColumnName("active_title_id");

                    b.Property<int>("AverageItemLevel")
                        .HasColumnType("integer")
                        .HasColumnName("average_item_level");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<int>("ChromieTime")
                        .HasColumnType("integer")
                        .HasColumnName("chromie_time");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<long>("Copper")
                        .HasColumnType("bigint")
                        .HasColumnName("copper");

                    b.Property<int>("EquippedItemLevel")
                        .HasColumnType("integer")
                        .HasColumnName("equipped_item_level");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<short>("Faction")
                        .HasColumnType("smallint")
                        .HasColumnName("faction");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<int?>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsResting")
                        .HasColumnType("boolean")
                        .HasColumnName("is_resting");

                    b.Property<bool>("IsWarMode")
                        .HasColumnType("boolean")
                        .HasColumnName("is_war_mode");

                    b.Property<DateTime>("LastApiCheck")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_api_check");

                    b.Property<DateTime>("LastApiModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_api_modified");

                    b.Property<DateTime>("LastSeenAddon")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_addon");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PlayedTotal")
                        .HasColumnType("integer")
                        .HasColumnName("played_total");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer")
                        .HasColumnName("realm_id");

                    b.Property<int>("RestedExperience")
                        .HasColumnType("integer")
                        .HasColumnName("rested_experience");

                    b.Property<bool?>("ShouldUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("should_update");

                    b.HasKey("Id")
                        .HasName("pk_player_character");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_player_character_account_id");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_player_character_guild_id");

                    b.HasIndex("LastApiCheck")
                        .HasDatabaseName("ix_player_character_last_api_check")
                        .HasFilter("should_update = true AND account_id IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("LastApiCheck"), new[] { "Id", "AccountId", "Name", "LastApiModified" });

                    b.HasIndex("RealmId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_player_character_realm_id_name");

                    b.ToTable("player_character", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAchievements", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("AchievementIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("achievement_ids");

                    b.Property<List<int>>("AchievementTimestamps")
                        .HasColumnType("integer[]")
                        .HasColumnName("achievement_timestamps");

                    b.Property<List<long>>("CriteriaAmounts")
                        .HasColumnType("bigint[]")
                        .HasColumnName("criteria_amounts");

                    b.Property<List<bool>>("CriteriaCompleted")
                        .HasColumnType("boolean[]")
                        .HasColumnName("criteria_completed");

                    b.Property<List<int>>("CriteriaIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("criteria_ids");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_achievements");

                    b.ToTable("player_character_achievements", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonAchievements", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, PlayerCharacterAddonAchievementsAchievement>>("Achievements")
                        .HasColumnType("jsonb")
                        .HasColumnName("achievements");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scanned_at");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_addon_achievements");

                    b.ToTable("player_character_addon_achievements", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonData", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, PlayerCharacterAddonDataAura>>("Auras")
                        .HasColumnType("jsonb")
                        .HasColumnName("auras");

                    b.Property<DateTime>("BagsScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bags_scanned_at");

                    b.Property<DateTime>("BankScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bank_scanned_at");

                    b.Property<string>("BindLocation")
                        .HasColumnType("text")
                        .HasColumnName("bind_location");

                    b.Property<Dictionary<int, PlayerCharacterAddonDataCurrency>>("Currencies")
                        .HasColumnType("jsonb")
                        .HasColumnName("currencies");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("text")
                        .HasColumnName("current_location");

                    b.Property<Dictionary<int, PlayerCharacterEquippedItem>>("EquippedItems")
                        .HasColumnType("jsonb")
                        .HasColumnName("equipped_items");

                    b.Property<Dictionary<int, Dictionary<int, List<int>>>>("GarrisonTrees")
                        .HasColumnType("jsonb")
                        .HasColumnName("garrison_trees");

                    b.Property<DateTime>("GarrisonTreesScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("garrison_trees_scanned_at");

                    b.Property<Dictionary<int, PlayerCharacterAddonDataGarrison>>("Garrisons")
                        .HasColumnType("jsonb")
                        .HasColumnName("garrisons");

                    b.Property<short>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<int>("LevelXp")
                        .HasColumnType("integer")
                        .HasColumnName("level_xp");

                    b.Property<Dictionary<int, PlayerCharacterAddonDataMythicPlus>>("MythicPlus")
                        .HasColumnType("jsonb")
                        .HasColumnName("mythic_plus");

                    b.Property<DateTime>("MythicPlusScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("mythic_plus_scanned_at");

                    b.Property<Dictionary<int, Dictionary<int, PlayerCharacterAddonDataMythicPlusMap>>>("MythicPlusSeasons")
                        .HasColumnType("jsonb")
                        .HasColumnName("mythic_plus_seasons");

                    b.Property<Dictionary<int, List<PlayerCharacterAddonDataMythicPlusRun>>>("MythicPlusWeeks")
                        .HasColumnType("jsonb")
                        .HasColumnName("mythic_plus_weeks");

                    b.Property<Dictionary<string, List<int>>>("ProfessionCooldowns")
                        .HasColumnType("jsonb")
                        .HasColumnName("profession_cooldowns");

                    b.Property<Dictionary<int, Dictionary<int, int>>>("ProfessionTraits")
                        .HasColumnType("jsonb")
                        .HasColumnName("profession_traits");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_addon_data");

                    b.ToTable("player_character_addon_data", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonMounts", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("Mounts")
                        .HasColumnType("integer[]")
                        .HasColumnName("mounts");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scanned_at");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_addon_mounts");

                    b.ToTable("player_character_addon_mounts", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonQuests", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("CallingsScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("callings_scanned_at");

                    b.Property<Dictionary<int, List<List<int>>>>("Dailies")
                        .HasColumnType("jsonb")
                        .HasColumnName("dailies");

                    b.Property<List<int>>("DailyQuests")
                        .HasColumnType("integer[]")
                        .HasColumnName("daily_quests");

                    b.Property<List<int>>("OtherQuests")
                        .HasColumnType("integer[]")
                        .HasColumnName("other_quests");

                    b.Property<Dictionary<string, PlayerCharacterAddonQuestsProgress>>("ProgressQuests")
                        .HasColumnType("jsonb")
                        .HasColumnName("progress_quests");

                    b.Property<DateTime>("QuestsScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("quests_scanned_at");

                    b.Property<DateTime>("WorldQuestsScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("world_quests_scanned_at");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_addon_quests");

                    b.ToTable("player_character_addon_quests", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterConfiguration", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<short>("BackgroundBrightness")
                        .HasColumnType("smallint")
                        .HasColumnName("background_brightness");

                    b.Property<short>("BackgroundId")
                        .HasColumnType("smallint")
                        .HasColumnName("background_id");

                    b.Property<short>("BackgroundSaturation")
                        .HasColumnType("smallint")
                        .HasColumnName("background_saturation");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_configuration");

                    b.ToTable("player_character_configuration", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterEquippedItems", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<WowInventorySlot, PlayerCharacterEquippedItem>>("Items")
                        .HasColumnType("jsonb")
                        .HasColumnName("items");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_equipped_items");

                    b.ToTable("player_character_equipped_items", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("BagId")
                        .HasColumnType("smallint")
                        .HasColumnName("bag_id");

                    b.Property<List<short>>("BonusIds")
                        .HasColumnType("smallint[]")
                        .HasColumnName("bonus_ids");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<short>("Context")
                        .HasColumnType("smallint")
                        .HasColumnName("context");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<short>("CraftedQuality")
                        .HasColumnType("smallint")
                        .HasColumnName("crafted_quality");

                    b.Property<short>("EnchantId")
                        .HasColumnType("smallint")
                        .HasColumnName("enchant_id");

                    b.Property<List<int>>("Gems")
                        .HasColumnType("integer[]")
                        .HasColumnName("gems");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<short>("ItemLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("item_level");

                    b.Property<short>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<short>("Quality")
                        .HasColumnType("smallint")
                        .HasColumnName("quality");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint")
                        .HasColumnName("slot");

                    b.Property<short>("SuffixId")
                        .HasColumnType("smallint")
                        .HasColumnName("suffix_id");

                    b.HasKey("Id")
                        .HasName("pk_player_character_item");

                    b.HasIndex("CharacterId", "Slot")
                        .HasDatabaseName("ix_player_character_item_character_id_slot");

                    b.HasIndex("CharacterId", "ItemId", "Location")
                        .HasDatabaseName("ix_player_character_item_character_id_item_id_location");

                    b.ToTable("player_character_item", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterLockouts", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<List<PlayerCharacterLockoutsLockout>>("Lockouts")
                        .HasColumnType("jsonb")
                        .HasColumnName("lockouts");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_lockouts");

                    b.ToTable("player_character_lockouts", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMedia", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("InsetUrl")
                        .HasColumnType("text")
                        .HasColumnName("inset_url");

                    b.Property<string>("MainRawUrl")
                        .HasColumnType("text")
                        .HasColumnName("main_raw_url");

                    b.Property<string>("MainUrl")
                        .HasColumnType("text")
                        .HasColumnName("main_url");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_media");

                    b.ToTable("player_character_media", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMounts", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("Mounts")
                        .HasColumnType("integer[]")
                        .HasColumnName("mounts");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_mounts");

                    b.ToTable("player_character_mounts", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlus", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("CurrentPeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("current_period_id");

                    b.Property<List<PlayerCharacterMythicPlusRun>>("PeriodRuns")
                        .HasColumnType("jsonb")
                        .HasColumnName("period_runs");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_mythic_plus");

                    b.ToTable("player_character_mythic_plus", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlusAddon", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, PlayerCharacterMythicPlusAddonMap>>("Maps")
                        .HasColumnType("jsonb")
                        .HasColumnName("maps");

                    b.Property<int>("Season")
                        .HasColumnType("integer")
                        .HasColumnName("season");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_mythic_plus_addon");

                    b.ToTable("player_character_mythic_plus_addon", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlusSeason", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("Season")
                        .HasColumnType("integer")
                        .HasColumnName("season");

                    b.Property<List<PlayerCharacterMythicPlusRun>>("Runs")
                        .HasColumnType("jsonb")
                        .HasColumnName("runs");

                    b.HasKey("CharacterId", "Season")
                        .HasName("pk_player_character_mythic_plus_season");

                    b.ToTable("player_character_mythic_plus_season", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterProfessions", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, string>>("ProfessionSpecializations")
                        .HasColumnType("jsonb")
                        .HasColumnName("profession_specializations");

                    b.Property<Dictionary<int, Dictionary<int, PlayerCharacterProfessionTier>>>("Professions")
                        .HasColumnType("jsonb")
                        .HasColumnName("professions");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_professions");

                    b.ToTable("player_character_professions", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterQuests", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("CompletedIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("completed_ids");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_quests");

                    b.ToTable("player_character_quests", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterRaiderIo", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, PlayerCharacterRaiderIoSeasonScores>>("Seasons")
                        .HasColumnType("jsonb")
                        .HasColumnName("seasons");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_raider_io");

                    b.ToTable("player_character_raider_io", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterReputations", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("ExtraReputationIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("extra_reputation_ids");

                    b.Property<List<int>>("ExtraReputationValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("extra_reputation_values");

                    b.Property<Dictionary<int, PlayerCharacterReputationsParagon>>("Paragons")
                        .HasColumnType("jsonb")
                        .HasColumnName("paragons");

                    b.Property<List<int>>("ReputationIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("reputation_ids");

                    b.Property<List<int>>("ReputationValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("reputation_values");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_reputations");

                    b.ToTable("player_character_reputations", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterShadowlands", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("ConduitIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("conduit_ids");

                    b.Property<List<int>>("ConduitRanks")
                        .HasColumnType("integer[]")
                        .HasColumnName("conduit_ranks");

                    b.Property<int>("CovenantId")
                        .HasColumnType("integer")
                        .HasColumnName("covenant_id");

                    b.Property<Dictionary<int, PlayerCharacterShadowlandsCovenant>>("Covenants")
                        .HasColumnType("jsonb")
                        .HasColumnName("covenants");

                    b.Property<int>("RenownLevel")
                        .HasColumnType("integer")
                        .HasColumnName("renown_level");

                    b.Property<int>("SoulbindId")
                        .HasColumnType("integer")
                        .HasColumnName("soulbind_id");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_shadowlands");

                    b.ToTable("player_character_shadowlands", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterSpecializations", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, PlayerCharacterSpecializationsSpecialization>>("Specializations")
                        .HasColumnType("jsonb")
                        .HasColumnName("specializations");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_specializations");

                    b.ToTable("player_character_specializations", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterStatistics", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<string>>("StatisticDescriptions")
                        .HasColumnType("text[]")
                        .HasColumnName("statistic_descriptions");

                    b.Property<List<int>>("StatisticIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("statistic_ids");

                    b.Property<List<int>>("StatisticQuantities")
                        .HasColumnType("integer[]")
                        .HasColumnName("statistic_quantities");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_statistics");

                    b.ToTable("player_character_statistics", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterStats", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<WowItemStatType, PlayerCharacterStatsBasic>>("Basic")
                        .HasColumnType("jsonb")
                        .HasColumnName("basic");

                    b.Property<Dictionary<WowItemStatType, int>>("Misc")
                        .HasColumnType("jsonb")
                        .HasColumnName("misc");

                    b.Property<Dictionary<WowItemStatType, PlayerCharacterStatsRating>>("Rating")
                        .HasColumnType("jsonb")
                        .HasColumnName("rating");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_stats");

                    b.ToTable("player_character_stats", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterTransmog", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("IllusionIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("illusion_ids");

                    b.Property<List<int>>("TransmogIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("transmog_ids");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_transmog");

                    b.ToTable("player_character_transmog", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterWeekly", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("KeystoneDungeon")
                        .HasColumnType("integer")
                        .HasColumnName("keystone_dungeon");

                    b.Property<int>("KeystoneLevel")
                        .HasColumnType("integer")
                        .HasColumnName("keystone_level");

                    b.Property<DateTime>("KeystoneScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("keystone_scanned_at");

                    b.Property<Dictionary<string, int>>("Torghast")
                        .HasColumnType("jsonb")
                        .HasColumnName("torghast");

                    b.Property<DateTime>("TorghastScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("torghast_scanned_at");

                    b.Property<PlayerCharacterWeeklyVault>("Vault")
                        .HasColumnType("jsonb")
                        .HasColumnName("vault");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_weekly");

                    b.ToTable("player_character_weekly", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerGuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer")
                        .HasColumnName("realm_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_player_guild");

                    b.HasIndex("UserId", "RealmId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_player_guild_user_id_realm_id_name");

                    b.ToTable("player_guild", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerGuildItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<short>>("BonusIds")
                        .HasColumnType("smallint[]")
                        .HasColumnName("bonus_ids");

                    b.Property<short>("Context")
                        .HasColumnType("smallint")
                        .HasColumnName("context");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<short>("CraftedQuality")
                        .HasColumnType("smallint")
                        .HasColumnName("crafted_quality");

                    b.Property<short>("EnchantId")
                        .HasColumnType("smallint")
                        .HasColumnName("enchant_id");

                    b.Property<List<int>>("Gems")
                        .HasColumnType("integer[]")
                        .HasColumnName("gems");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<short>("ItemLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("item_level");

                    b.Property<short>("Quality")
                        .HasColumnType("smallint")
                        .HasColumnName("quality");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint")
                        .HasColumnName("slot");

                    b.Property<short>("SuffixId")
                        .HasColumnType("smallint")
                        .HasColumnName("suffix_id");

                    b.Property<short>("TabId")
                        .HasColumnType("smallint")
                        .HasColumnName("tab_id");

                    b.HasKey("Id")
                        .HasName("pk_player_guild_item");

                    b.HasIndex("GuildId", "ItemId")
                        .HasDatabaseName("ix_player_guild_item_guild_id_item_id");

                    b.ToTable("player_guild_item", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.AccountTransmogQuery", b =>
                {
                    b.Property<List<int>>("IllusionIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("illusion_ids");

                    b.Property<List<int>>("TransmogIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("transmog_ids");

                    b.ToTable("AccountTransmogQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.AchievementCriteriaQuery", b =>
                {
                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("integer")
                        .HasColumnName("criteria_id");

                    b.ToTable("AchievementCriteriaQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.ActiveConnectedRealmQuery", b =>
                {
                    b.Property<int>("ConnectedRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("connected_realm_id");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.ToTable("ActiveConnectedRealmQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.AuctionBrowseQuery", b =>
                {
                    b.Property<string>("GroupKey")
                        .HasColumnType("text")
                        .HasColumnName("group_key");

                    b.Property<long>("LowestBuyoutPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("lowest_buyout_price");

                    b.Property<long>("TotalQuantity")
                        .HasColumnType("bigint")
                        .HasColumnName("total_quantity");

                    b.ToTable("AuctionBrowseQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.CompletedAchievementsQuery", b =>
                {
                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<int>("Timestamp")
                        .HasColumnType("integer")
                        .HasColumnName("timestamp");

                    b.ToTable("CompletedAchievementsQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.GoldSnapshotQuery", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer")
                        .HasColumnName("realm_id");

                    b.Property<int>("TotalGold")
                        .HasColumnType("integer")
                        .HasColumnName("total_gold");

                    b.ToTable("GoldSnapshotQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.LatestGoldSnapshotQuery", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("gold");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer")
                        .HasColumnName("realm_id");

                    b.ToTable("LatestGoldSnapshotQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.MountQuery", b =>
                {
                    b.Property<List<int>>("AddonMounts")
                        .HasColumnType("integer[]")
                        .HasColumnName("addon_mounts");

                    b.Property<List<int>>("Mounts")
                        .HasColumnType("integer[]")
                        .HasColumnName("mounts");

                    b.ToTable("MountQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.SchedulerCharacterQuery", b =>
                {
                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("CharacterName")
                        .HasColumnType("text")
                        .HasColumnName("character_name");

                    b.Property<DateTime>("LastApiCheck")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_api_check");

                    b.Property<DateTime>("LastApiModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_api_modified");

                    b.Property<string>("RealmSlug")
                        .HasColumnType("text")
                        .HasColumnName("realm_slug");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.ToTable("SchedulerCharacterQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.SchedulerUserQuery", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.ToTable("SchedulerUserQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.StatisticsQuery", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("StatisticId")
                        .HasColumnType("integer")
                        .HasColumnName("statistic_id");

                    b.ToTable("StatisticsQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.UserLeaderboardQuery", b =>
                {
                    b.Property<int>("AppearanceIdCount")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_id_count");

                    b.Property<int>("AppearanceSourceCount")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_source_count");

                    b.Property<int>("CompletedQuestCount")
                        .HasColumnType("integer")
                        .HasColumnName("completed_quest_count");

                    b.Property<short>("IllusionCount")
                        .HasColumnType("smallint")
                        .HasColumnName("illusion_count");

                    b.Property<short>("MountCount")
                        .HasColumnType("smallint")
                        .HasColumnName("mount_count");

                    b.Property<short>("ToyCount")
                        .HasColumnType("smallint")
                        .HasColumnName("toy_count");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.ToTable("UserLeaderboardQuery", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DefaultRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("default_realm_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_team");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_team_guid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_team_user_id");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team.TeamCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<short>("PrimaryRole")
                        .HasColumnType("smallint")
                        .HasColumnName("primary_role");

                    b.Property<short>("SecondaryRole")
                        .HasColumnType("smallint")
                        .HasColumnName("secondary_role");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_team_character");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_team_character_character_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_character_team_id");

                    b.ToTable("team_character", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.User.UserCache", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<List<int>>("AppearanceIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("appearance_ids");

                    b.Property<List<string>>("AppearanceSources")
                        .HasColumnType("text[]")
                        .HasColumnName("appearance_sources");

                    b.Property<int>("CompletedQuests")
                        .HasColumnType("integer")
                        .HasColumnName("completed_quests");

                    b.Property<List<short>>("IllusionIds")
                        .HasColumnType("smallint[]")
                        .HasColumnName("illusion_ids");

                    b.Property<List<short>>("MountIds")
                        .HasColumnType("smallint[]")
                        .HasColumnName("mount_ids");

                    b.Property<DateTimeOffset>("MountsUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("mounts_updated");

                    b.Property<List<short>>("ToyIds")
                        .HasColumnType("smallint[]")
                        .HasColumnName("toy_ids");

                    b.Property<DateTimeOffset>("ToysUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("toys_updated");

                    b.Property<DateTimeOffset>("TransmogUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transmog_updated");

                    b.HasKey("UserId")
                        .HasName("pk_user_cache");

                    b.ToTable("user_cache", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.User.UserLeaderboardSnapshot", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("AchievementPointsAlliance")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_points_alliance");

                    b.Property<int>("AchievementPointsHorde")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_points_horde");

                    b.Property<int>("AchievementPointsOverall")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_points_overall");

                    b.Property<int>("AppearanceIdCount")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_id_count");

                    b.Property<int>("AppearanceSourceCount")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_source_count");

                    b.Property<int>("CompletedQuestCount")
                        .HasColumnType("integer")
                        .HasColumnName("completed_quest_count");

                    b.Property<short>("HeirloomCount")
                        .HasColumnType("smallint")
                        .HasColumnName("heirloom_count");

                    b.Property<short>("HeirloomLevels")
                        .HasColumnType("smallint")
                        .HasColumnName("heirloom_levels");

                    b.Property<short>("IllusionCount")
                        .HasColumnType("smallint")
                        .HasColumnName("illusion_count");

                    b.Property<short>("MountCount")
                        .HasColumnType("smallint")
                        .HasColumnName("mount_count");

                    b.Property<short>("PetCount")
                        .HasColumnType("smallint")
                        .HasColumnName("pet_count");

                    b.Property<short>("RecipeCount")
                        .HasColumnType("smallint")
                        .HasColumnName("recipe_count");

                    b.Property<short>("ReputationCount")
                        .HasColumnType("smallint")
                        .HasColumnName("reputation_count");

                    b.Property<short>("TitleCount")
                        .HasColumnType("smallint")
                        .HasColumnName("title_count");

                    b.Property<short>("ToyCount")
                        .HasColumnType("smallint")
                        .HasColumnName("toy_count");

                    b.HasKey("UserId", "Date")
                        .HasName("pk_user_leaderboard_snapshot");

                    b.HasIndex("UserId", "Date")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_user_leaderboard_snapshot_user_id_date");

                    b.ToTable("user_leaderboard_snapshot", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WorldQuestReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Class")
                        .HasColumnType("smallint")
                        .HasColumnName("class");

                    b.Property<short>("Expansion")
                        .HasColumnType("smallint")
                        .HasColumnName("expansion");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<short>("Faction")
                        .HasColumnType("smallint")
                        .HasColumnName("faction");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer")
                        .HasColumnName("quest_id");

                    b.Property<short>("Region")
                        .HasColumnType("smallint")
                        .HasColumnName("region");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reported_at");

                    b.Property<List<int[]>>("Rewards")
                        .HasColumnType("jsonb")
                        .HasColumnName("rewards");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("pk_world_quest_report");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_world_quest_report_user_id");

                    b.HasIndex("Region", "ExpiresAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_world_quest_report_region_expires_at");

                    b.ToTable("world_quest_report", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowAuction", b =>
                {
                    b.Property<int>("ConnectedRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("connected_realm_id");

                    b.Property<int>("AuctionId")
                        .HasColumnType("integer")
                        .HasColumnName("auction_id");

                    b.Property<int?>("AppearanceId")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_id");

                    b.Property<string>("AppearanceSource")
                        .HasColumnType("text")
                        .HasColumnName("appearance_source");

                    b.Property<long>("BidPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("bid_price");

                    b.Property<List<int>>("BonusIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("bonus_ids");

                    b.Property<long>("BuyoutPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("buyout_price");

                    b.Property<short>("Context")
                        .HasColumnType("smallint")
                        .HasColumnName("context");

                    b.Property<string>("GroupKey")
                        .HasColumnType("text")
                        .HasColumnName("group_key");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<List<short>>("ModifierTypes")
                        .HasColumnType("smallint[]")
                        .HasColumnName("modifier_types");

                    b.Property<List<int>>("ModifierValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("modifier_values");

                    b.Property<short>("PetBreedId")
                        .HasColumnType("smallint")
                        .HasColumnName("pet_breed_id");

                    b.Property<short>("PetLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("pet_level");

                    b.Property<short>("PetQuality")
                        .HasColumnType("smallint")
                        .HasColumnName("pet_quality");

                    b.Property<short>("PetSpeciesId")
                        .HasColumnType("smallint")
                        .HasColumnName("pet_species_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<short>("TimeLeft")
                        .HasColumnType("smallint")
                        .HasColumnName("time_left");

                    b.HasKey("ConnectedRealmId", "AuctionId")
                        .HasName("pk_wow_auction");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_wow_auction_item_id");

                    b.HasIndex("PetSpeciesId")
                        .HasDatabaseName("ix_wow_auction_pet_species_id");

                    b.HasIndex("AppearanceId", "BuyoutPrice")
                        .HasDatabaseName("ix_wow_auction_appearance_id_buyout_price")
                        .HasFilter("appearance_id IS NOT NULL");

                    b.HasIndex("AppearanceSource", "BuyoutPrice")
                        .HasDatabaseName("ix_wow_auction_appearance_source_buyout_price")
                        .HasFilter("appearance_source IS NOT NULL");

                    b.ToTable("wow_auction", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowAuctionCheapestByAppearanceId", b =>
                {
                    b.Property<int>("ConnectedRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("connected_realm_id");

                    b.Property<int>("AppearanceId")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_id");

                    b.Property<int>("AuctionId")
                        .HasColumnType("integer")
                        .HasColumnName("auction_id");

                    b.HasKey("ConnectedRealmId", "AppearanceId")
                        .HasName("pk_wow_auction_cheapest_by_appearance_id");

                    b.ToTable("wow_auction_cheapest_by_appearance_id", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowAuctionCheapestByAppearanceSource", b =>
                {
                    b.Property<int>("ConnectedRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("connected_realm_id");

                    b.Property<string>("AppearanceSource")
                        .HasColumnType("text")
                        .HasColumnName("appearance_source");

                    b.Property<int>("AuctionId")
                        .HasColumnType("integer")
                        .HasColumnName("auction_id");

                    b.HasKey("ConnectedRealmId", "AppearanceSource")
                        .HasName("pk_wow_auction_cheapest_by_appearance_source");

                    b.ToTable("wow_auction_cheapest_by_appearance_source", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowCharacterClass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("ArmorMask")
                        .HasColumnType("smallint")
                        .HasColumnName("armor_mask");

                    b.Property<short>("RolesMask")
                        .HasColumnType("smallint")
                        .HasColumnName("roles_mask");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_wow_character_class");

                    b.ToTable("wow_character_class", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowCharacterRace", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("Faction")
                        .HasColumnType("smallint")
                        .HasColumnName("faction");

                    b.HasKey("Id")
                        .HasName("pk_wow_character_race");

                    b.ToTable("wow_character_race", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowCharacterSpecialization", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("class_id");

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<short>("PrimaryStat")
                        .HasColumnType("smallint")
                        .HasColumnName("primary_stat");

                    b.Property<short>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_wow_character_specialization");

                    b.ToTable("wow_character_specialization", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowCurrency", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    b.Property<int>("MaxPerWeek")
                        .HasColumnType("integer")
                        .HasColumnName("max_per_week");

                    b.Property<int>("MaxTotal")
                        .HasColumnType("integer")
                        .HasColumnName("max_total");

                    b.HasKey("Id")
                        .HasName("pk_wow_currency");

                    b.ToTable("wow_currency", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowCurrencyCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("Expansion")
                        .HasColumnType("smallint")
                        .HasColumnName("expansion");

                    b.Property<short>("Flags")
                        .HasColumnType("smallint")
                        .HasColumnName("flags");

                    b.HasKey("Id")
                        .HasName("pk_wow_currency_category");

                    b.ToTable("wow_currency_category", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowHoliday", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<List<short>>("Durations")
                        .HasColumnType("smallint[]")
                        .HasColumnName("durations");

                    b.Property<short>("FilterType")
                        .HasColumnType("smallint")
                        .HasColumnName("filter_type");

                    b.Property<short>("Flags")
                        .HasColumnType("smallint")
                        .HasColumnName("flags");

                    b.Property<short>("Looping")
                        .HasColumnType("smallint")
                        .HasColumnName("looping");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint")
                        .HasColumnName("priority");

                    b.Property<short>("Region")
                        .HasColumnType("smallint")
                        .HasColumnName("region");

                    b.Property<List<DateTime>>("StartDates")
                        .HasColumnType("timestamp with time zone[]")
                        .HasColumnName("start_dates");

                    b.HasKey("Id")
                        .HasName("pk_wow_holiday");

                    b.ToTable("wow_holiday", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("BindType")
                        .HasColumnType("smallint")
                        .HasColumnName("bind_type");

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("class_id");

                    b.Property<int>("ClassMask")
                        .HasColumnType("integer")
                        .HasColumnName("class_mask");

                    b.Property<short>("ContainerSlots")
                        .HasColumnType("smallint")
                        .HasColumnName("container_slots");

                    b.Property<short>("Expansion")
                        .HasColumnType("smallint")
                        .HasColumnName("expansion");

                    b.Property<short>("Flags")
                        .HasColumnType("smallint")
                        .HasColumnName("flags");

                    b.Property<short>("InventoryType")
                        .HasColumnType("smallint")
                        .HasColumnName("inventory_type");

                    b.Property<short>("ItemLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("item_level");

                    b.Property<short>("LimitCategory")
                        .HasColumnType("smallint")
                        .HasColumnName("limit_category");

                    b.Property<int>("OppositeFactionId")
                        .HasColumnType("integer")
                        .HasColumnName("opposite_faction_id");

                    b.Property<short>("PrimaryStat")
                        .HasColumnType("smallint")
                        .HasColumnName("primary_stat");

                    b.Property<short>("Quality")
                        .HasColumnType("smallint")
                        .HasColumnName("quality");

                    b.Property<long>("RaceMask")
                        .HasColumnType("bigint")
                        .HasColumnName("race_mask");

                    b.Property<int>("RequiredAbility")
                        .HasColumnType("integer")
                        .HasColumnName("required_ability");

                    b.Property<short>("RequiredLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("required_level");

                    b.Property<short>("RequiredSkill")
                        .HasColumnType("smallint")
                        .HasColumnName("required_skill");

                    b.Property<short>("RequiredSkillRank")
                        .HasColumnType("smallint")
                        .HasColumnName("required_skill_rank");

                    b.Property<int>("Stackable")
                        .HasColumnType("integer")
                        .HasColumnName("stackable");

                    b.Property<short>("SubclassId")
                        .HasColumnType("smallint")
                        .HasColumnName("subclass_id");

                    b.Property<short>("Unique")
                        .HasColumnType("smallint")
                        .HasColumnName("unique");

                    b.HasKey("Id")
                        .HasName("pk_wow_item");

                    b.ToTable("wow_item", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItemBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BonusTypeFlags")
                        .HasColumnType("bigint")
                        .HasColumnName("bonus_type_flags");

                    b.Property<List<List<int>>>("Bonuses")
                        .HasColumnType("jsonb")
                        .HasColumnName("bonuses");

                    b.HasKey("Id")
                        .HasName("pk_wow_item_bonus");

                    b.ToTable("wow_item_bonus", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItemClass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("class_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_item_class");

                    b.ToTable("wow_item_class", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItemEffect", b =>
                {
                    b.Property<int>("ItemXItemEffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_x_item_effect_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemXItemEffectId"));

                    b.Property<int>("Effect")
                        .HasColumnType("integer")
                        .HasColumnName("effect");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int[]>("Values")
                        .HasColumnType("integer[]")
                        .HasColumnName("values");

                    b.HasKey("ItemXItemEffectId")
                        .HasName("pk_wow_item_effect");

                    b.ToTable("wow_item_effect", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItemEffectV2", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<Dictionary<int, Dictionary<int, WowItemEffectV2SpellEffect>>>("SpellEffects")
                        .HasColumnType("jsonb")
                        .HasColumnName("spell_effects");

                    b.HasKey("ItemId")
                        .HasName("pk_wow_item_effect_v2");

                    b.ToTable("wow_item_effect_v2", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItemModifiedAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppearanceId")
                        .HasColumnType("integer")
                        .HasColumnName("appearance_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<short>("Modifier")
                        .HasColumnType("smallint")
                        .HasColumnName("modifier");

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<short>("SourceType")
                        .HasColumnType("smallint")
                        .HasColumnName("source_type");

                    b.HasKey("Id")
                        .HasName("pk_wow_item_modified_appearance");

                    b.ToTable("wow_item_modified_appearance", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowItemSubclass", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("AuctionHouseSortOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("auction_house_sort_order");

                    b.Property<short>("ClassId")
                        .HasColumnType("smallint")
                        .HasColumnName("class_id");

                    b.Property<short>("SubclassId")
                        .HasColumnType("smallint")
                        .HasColumnName("subclass_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_item_subclass");

                    b.ToTable("wow_item_subclass", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowMount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Flags")
                        .HasColumnType("integer")
                        .HasColumnName("flags");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<short>("SourceType")
                        .HasColumnType("smallint")
                        .HasColumnName("source_type");

                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnName("spell_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_mount");

                    b.ToTable("wow_mount", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowMythicPlusSeason", b =>
                {
                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Region", "Id")
                        .HasName("pk_wow_mythic_plus_season");

                    b.ToTable("wow_mythic_plus_season", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowPeriod", b =>
                {
                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("Ends")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends");

                    b.Property<DateTime>("Starts")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts");

                    b.HasKey("Region", "Id")
                        .HasName("pk_wow_period");

                    b.ToTable("wow_period", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowPet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatureId")
                        .HasColumnType("integer")
                        .HasColumnName("creature_id");

                    b.Property<int>("Flags")
                        .HasColumnType("integer")
                        .HasColumnName("flags");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<short>("PetType")
                        .HasColumnType("smallint")
                        .HasColumnName("pet_type");

                    b.Property<short>("SourceType")
                        .HasColumnType("smallint")
                        .HasColumnName("source_type");

                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnName("spell_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_pet");

                    b.ToTable("wow_pet", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowProfessionRecipeItem", b =>
                {
                    b.Property<int>("SkillLineAbilityId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_line_ability_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("SkillLineId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_line_id");

                    b.HasKey("SkillLineAbilityId", "ItemId")
                        .HasName("pk_wow_profession_recipe_item");

                    b.ToTable("wow_profession_recipe_item", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowQuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastApiCheck")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_api_check");

                    b.HasKey("Id")
                        .HasName("pk_wow_quest");

                    b.ToTable("wow_quest", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowRealm", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("ConnectedRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("connected_realm_id");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text")
                        .HasColumnName("english_name");

                    b.Property<string>("Locale")
                        .HasColumnType("text")
                        .HasColumnName("locale");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_wow_realm");

                    b.ToTable("wow_realm", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowReputation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("Expansion")
                        .HasColumnType("smallint")
                        .HasColumnName("expansion");

                    b.Property<short>("ParagonId")
                        .HasColumnType("smallint")
                        .HasColumnName("paragon_id");

                    b.Property<short>("ParentId")
                        .HasColumnType("smallint")
                        .HasColumnName("parent_id");

                    b.Property<short>("TierId")
                        .HasColumnType("smallint")
                        .HasColumnName("tier_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_reputation");

                    b.ToTable("wow_reputation", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowReputationTier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int[]>("MinValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("min_values");

                    b.HasKey("Id")
                        .HasName("pk_wow_reputation_tier");

                    b.ToTable("wow_reputation_tier", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowToy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Flags")
                        .HasColumnType("integer")
                        .HasColumnName("flags");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<short>("SourceType")
                        .HasColumnType("smallint")
                        .HasColumnName("source_type");

                    b.HasKey("Id")
                        .HasName("pk_wow_toy");

                    b.ToTable("wow_toy", (string)null);
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Wow.WowTransmogSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassMask")
                        .HasColumnType("integer")
                        .HasColumnName("class_mask");

                    b.Property<short>("Flags")
                        .HasColumnType("smallint")
                        .HasColumnName("flags");

                    b.Property<short>("GroupId")
                        .HasColumnType("smallint")
                        .HasColumnName("group_id");

                    b.Property<List<int>>("ItemModifiedAppearanceIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("item_modified_appearance_ids");

                    b.Property<int>("ItemNameDescriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("item_name_description_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_transmog_set");

                    b.ToTable("wow_transmog_set", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.BackgroundImage", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_background_image_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccount", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_player_account_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountAddonData", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithOne("AddonData")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerAccountAddonData", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_account_addon_data_player_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountGoldSnapshot", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_account_gold_snapshot_player_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountHeirlooms", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithOne("Heirlooms")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerAccountHeirlooms", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_account_heirlooms_player_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountPets", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithOne("Pets")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerAccountPets", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_account_pets_player_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountToys", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithOne("Toys")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerAccountToys", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_account_toys_player_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccountTransmogSources", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithOne("TransmogSources")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerAccountTransmogSources", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_account_transmog_sources_player_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacter", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerAccount", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_player_character_player_account_account_id");

                    b.HasOne("Wowthing.Lib.Models.Player.PlayerGuild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .HasConstraintName("fk_player_character_player_guild_guild_id");

                    b.Navigation("Account");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAchievements", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Achievements")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterAchievements", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_achievements_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonAchievements", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("AddonAchievements")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterAddonAchievements", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_addon_achievements_player_character_charac");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonData", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("AddonData")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterAddonData", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_addon_data_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonMounts", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("AddonMounts")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterAddonMounts", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_addon_mounts_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterAddonQuests", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("AddonQuests")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterAddonQuests", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_addon_quests_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterConfiguration", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Configuration")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterConfiguration", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_configuration_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterEquippedItems", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("EquippedItems")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterEquippedItems", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_equipped_items_player_character_character_");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterItem", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithMany("Items")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_item_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterLockouts", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Lockouts")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterLockouts", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_lockouts_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMedia", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Media")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterMedia", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_media_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMounts", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Mounts")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterMounts", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_mounts_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlus", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("MythicPlus")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlus", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_mythic_plus_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlusAddon", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("MythicPlusAddon")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlusAddon", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_mythic_plus_addon_player_character_charact");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterMythicPlusSeason", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithMany("MythicPlusSeasons")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_mythic_plus_season_player_character_charac");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterProfessions", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Professions")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterProfessions", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_professions_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterQuests", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Quests")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterQuests", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_quests_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterRaiderIo", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("RaiderIo")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterRaiderIo", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_raider_io_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterReputations", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Reputations")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterReputations", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_reputations_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterShadowlands", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Shadowlands")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterShadowlands", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_shadowlands_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterSpecializations", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Specializations")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterSpecializations", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_specializations_player_character_character");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterStatistics", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_statistics_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterStats", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Stats")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterStats", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_stats_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterTransmog", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Transmog")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterTransmog", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_transmog_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacterWeekly", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithOne("Weekly")
                        .HasForeignKey("Wowthing.Lib.Models.Player.PlayerCharacterWeekly", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_character_weekly_player_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerGuild", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_guild_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerGuildItem", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerGuild", "Guild")
                        .WithMany("Items")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_guild_item_player_guild_guild_id");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team.Team", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team.TeamCharacter", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.Player.PlayerCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_character_player_character_character_id");

                    b.HasOne("Wowthing.Lib.Models.Team.Team", "Team")
                        .WithMany("Characters")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_character_team_team_id");

                    b.Navigation("Character");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.User.UserCache", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_cache_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.User.UserLeaderboardSnapshot", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_leaderboard_snapshot_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WorldQuestReport", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_world_quest_report_application_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerAccount", b =>
                {
                    b.Navigation("AddonData");

                    b.Navigation("Characters");

                    b.Navigation("Heirlooms");

                    b.Navigation("Pets");

                    b.Navigation("Toys");

                    b.Navigation("TransmogSources");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerCharacter", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("AddonAchievements");

                    b.Navigation("AddonData");

                    b.Navigation("AddonMounts");

                    b.Navigation("AddonQuests");

                    b.Navigation("Configuration");

                    b.Navigation("EquippedItems");

                    b.Navigation("Items");

                    b.Navigation("Lockouts");

                    b.Navigation("Media");

                    b.Navigation("Mounts");

                    b.Navigation("MythicPlus");

                    b.Navigation("MythicPlusAddon");

                    b.Navigation("MythicPlusSeasons");

                    b.Navigation("Professions");

                    b.Navigation("Quests");

                    b.Navigation("RaiderIo");

                    b.Navigation("Reputations");

                    b.Navigation("Shadowlands");

                    b.Navigation("Specializations");

                    b.Navigation("Stats");

                    b.Navigation("Transmog");

                    b.Navigation("Weekly");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Player.PlayerGuild", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team.Team", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
